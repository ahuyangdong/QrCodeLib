//提交gitPack远程编译，在根build.gradle中加入
//classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
//本文件加入
//apply plugin: 'com.github.dcendents.android-maven'

//在module的build.gradle末位加入
//apply from: './bintray.gradle'

// 执行 ./gradlew makeJar
// 执行 ./gradlew publish
// 如果失败，先执行：gradlew assembleDebug --rerun-tasks

apply plugin: 'maven-publish'

def GROUP_ID = 'com.kotlinx.zxing-lib'
def ARTIFACT_ID = 'zxing-lib'
def VERSION_NAME = '1.0.0'
def jarName = ARTIFACT_ID + "-" + VERSION_NAME

task makeJar(type: Copy) {
    group = 'jar'
    //删除存在的
    delete 'build/libs/' + jarName + ".jar"
    //设置拷贝的文件
    from("build/intermediates/aar_main_jar/release")
    //打进jar包后的文件目录,将classes.jar放入build/libs/目录下
    into('build/libs/')
    //要打包的jar文件
    include('classes.jar')
    //重命名
    rename('classes.jar', jarName + ".jar")
}
//buid之后执行
makeJar.dependsOn(build)
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

//生成源码
task sourcesJar(type: Jar) {
    group = 'jar'
    if (project.hasProperty("kotlin")) {
        from android.sourceSets.main.java.getSrcDirs()
    } else if (project.hasProperty("android")) {
        from android.sourceSets.main.java.sourceFiles
    } else {
        println project
        from sourceSets.main.allSource
    }
    classifier = 'sources'
    archiveName = jarName + '-sources.jar'
}

//生成文档
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    options { encoding = "utf-8" }
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    archiveName = jarName + '-javadoc.jar'
}

//生成pom
publishing {
    publications {
        aar_pub(MavenPublication) {
            groupId = GROUP_ID
            artifactId = ARTIFACT_ID
            version = VERSION_NAME
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                    if (dp.version != "unspecified") { // 过滤项目内library引用
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dp.group)
                        dependencyNode.appendNode('artifactId', dp.name)
                        dependencyNode.appendNode('version', dp.version)
                        // for exclusions
                        if (dp.excludeRules.size() > 0) {
                            def exclusions = dependencyNode.appendNode('exclusions')
                            dp.excludeRules.each { ExcludeRule ex ->
                                def exclusion = exclusions.appendNode('exclusion')
                                exclusion.appendNode('groupId', ex.group)
                                exclusion.appendNode('artifactId', ex.module)
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "$buildDir/repository"
        }
    }
}

//加入到build
artifacts {
    archives sourcesJar
    archives javadocJar
}